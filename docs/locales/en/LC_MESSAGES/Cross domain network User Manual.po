# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, hpctest
# This file is distributed under the same license as the hocdemotest
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hocdemotest \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-07 15:07+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../source/Cross 2fad633ba59b423d8b48b6bd4923f990 Manual.rst:4 User domain
#: network
msgid "跨域网络使用手册"
msgstr ""

#: ../../source/Cross Manual.rst:7 User c3e149083a8b4df0a59e5d33f84fb9c4 domain
#: network
msgid "1. 引言"
msgstr ""

#: ../../source/Cross Manual.rst:10 User bdcc5bba162346829d1fa78605b9e194
#: domain network
msgid "1.1 编写目的"
msgstr ""

#: ../../source/Cross Manual.rst:12 User domain
#: ff0dcaac5712443990750170a0c891c4 network
msgid "此文档描述Hyperchain网络里的跨域和节点发现相关概念、介绍网络地址配置项含义，使软件开发人员能清楚地了解Hyperchain的网络配置，便于Hyperchain的组网部署。"
msgstr ""

#: ../../source/Cross 4d10e276fa3e40e8a888ee5dc90961b1 Manual.rst:15 User
#: domain network
msgid "1.2 相关配置"
msgstr ""

#: ../../source/Cross 03d56cf84ef04b2d8b82f5ab4be2db2f Manual.rst:17 User
#: domain network
msgid ""
"网络地址相关的配置有两个地方，分别位于系统级别 `configuration/dynamic.toml` 配置文件和分区级别 "
"`configuration/<分区名>/ns_dynamic.toml` 配置文件里。"
msgstr ""

#: ../../source/Cross Manual.rst:20 User ca94d1386e764eaa9f436975ad117617
#: domain network
msgid "1.2.1 dynamic.toml"
msgstr ""

#: ../../source/Cross Manual.rst:22 User a13358a1610241cf97974f5046e66078
#: domain network
msgid "`dynamic.toml` 与网络地址相关的配置如下代码所示，主要用来配置本地节点的域相关信息::"
msgstr ""

#: ../../source/Cross 1a2d899a435b4a9bac0173edd060aa16 Manual.rst:41 User
#: domain network
msgid "1.2.2 ns_dynamic.toml"
msgstr ""

#: ../../source/Cross Manual.rst:43 User af7cd4abedb74e94954abb78cbbec270
#: domain network
msgid "`ns_dynamic.toml` 与网络地址相关的配置如下代码所示，主要用来配置本地节点在该分区下的要去连接的对端节点地址信息::"
msgstr ""

#: ../../source/Cross 71b0b338eaa240f1ae37f628fb5e3da8 Manual.rst:59 User
#: domain network
msgid ""
"当本地节点向 `[p2p.ip.remote.hosts]` 里配置的对端节点发起连接后，对端节点会把本地节点 `dynamic.toml` "
"里的域列表信息广播给网络里的其他节点，如果其他节点与本地节点还没建立起连接，则从收到的域列表里挑选名称与自己所在域一样的网络域下对应的地址，自动发起网络连接。"
msgstr ""

#: ../../source/Cross 1fb3743b496a4dfbbf8e1a37e52a6da6 Manual.rst:62 User
#: domain network
msgid "2. 功能说明"
msgstr ""

#: ../../source/Cross Manual.rst:64 User a9c8da7178aa409faa9adabbae1d3197
#: domain network
msgid ""
"在跨域网络里，存在网络域和网络域地址列表两个配置项，分别用于配置本地节点目前处在的网络域名称和本地节点在不同网络域下可被访问的 IP "
"地址和端口号，也可以理解为用于指定这些域下的节点应该使用哪个 IP 地址来连本地节点自己。"
msgstr ""

#: ../../source/Cross Manual.rst:66 User domain
#: fce9d945e0b547878b43fa1c4346da0d network
msgid ""
"在 hyperchain v2.0.8 以及之后的版本，系统集成了节点发现功能，默认开启。 "
"**节点发现使得新加入的节点在启动之前，网络地址配置得到极大简化，并且对于仅仅开放了单向网络通道的两个节点，不管该单向网络通道是 新节点->老节点"
" 还是 新节点 <- 老节点，都只需要做好新节点网络地址的配置就行，而不需要对老节点的网络配置进行人工修改** 。"
msgstr ""

#: ../../source/Cross 0a04a29fd9db468797351019416e2ca1 Manual.rst:68 User
#: domain network
msgid "下面将分别介绍 **跨域通信** 和 **节点发现** 功能。"
msgstr ""

#: ../../source/Cross 4fd6e4b28f6047eea3c334ee0f3c04f6 Manual.rst:71 User
#: domain network
msgid "2.1 跨域通信"
msgstr ""

#: ../../source/Cross 4ed1e1ebaa2f44f086f535c26ef62b3e Manual.rst:73 User
#: domain network
msgid "网络域，与局域网的概念类似，在同一个网络域下的节点可以互相连通，不在同一个网络域名下的节点无法互通。网络域与计算机网络里的局域网差别在于，这里的网络域，指的是逻辑上的网络域，即虽然节点在同一个局域网内且IP互通，但是可以被划分为逻辑上不同的网络域。"
msgstr ""

#: ../../source/Cross Manual.rst:75 User b8c37c7180aa478591b9243fc8db54c5
#: domain network
msgid ""
"在 **hyperchain v2.0.8 之前版本** "
"的设计里，节点间在建立连接的时候，虽然IP是可通的，但是因为逻辑上处在不同的网络域，如果网络域地址列表里面不包含 **彼此** "
"的网络域，则不能成功建立连接，连接会被拒绝掉。网络拓扑示意图如下所示，网络域 domainA 内的节点和网络域 domainB "
"内的节点的网络域地址列表里都只有一个网络域，因此 node1、node2、node3、node4 均不是跨域节点，domainA 下的节点无法与 "
"domainB 下的节点建立物理连接：（通过在建立物理连接的过程中，去检查彼此的网络域地址列表来决定是否拒绝连接）"
msgstr ""

#: ../../source/Cross 60aaee19f10542ab9ea7bbe99f395ea3 Manual.rst:77 User
#: domain network
msgid "|image0|"
msgstr ""

#: ../../source/Cross 6ab1fb9349554b21bd562f0e91cfec02 Manual.rst:1356 User
#: domain network
msgid "image0"
msgstr ""

#: ../../source/Cross 7e53312c518e429487ce20dd4e64a604 Manual.rst:79 User
#: domain network
msgid ""
"然而，通过修改网络域地址列表，让处在不同网络域下的节点的网络域地址列表里都配有可跨的网络域，这两个网络域的节点才能成功建立起连接，此时，node1、node2、node3、node4"
" 均称为 **跨域节点** ，如下图所示："
msgstr ""

#: ../../source/Cross 90b2ddc1926a4c7c8a130ca7931bbb45 Manual.rst:81 User
#: domain network
msgid "|image1|"
msgstr ""

#: ../../source/Cross 272b15efe0604767a7c5a72452c9a103 Manual.rst:1357 User
#: domain network
msgid "image1"
msgstr ""

#: ../../source/Cross Manual.rst:83 User domain
#: e5f0c900a85e4acc8b1142205c316d3c network
msgid ""
"在 **hyperchain v2.0.8  及之后的版本** "
"里，在上述设计的基础上，针对新增节点并且新增网络域的场景做了优化，允许老节点的网络域地址列表里没有新域的情况下，在新节点网络配置正确的前提下，新节点依旧可以与老节点建立起网络连接，同时老节点会动态新增网络域，在自己的网络域地址列表里回写新节点所在的域。也就是说，"
"  网络连接是否能建立起来，完全取决于 `[p2p.ip.remote.hosts]` ， **只要** "
"`[p2p.ip.remote.hosts]` "
"**配了对端节点的可连通地址，不管网络域地址列表配置如何、是否配全，都可以建立起网络连接，但是不同情况下节点可能有不一样的行为表现** "
"。为了便于读者理解，下面使用一个具体例子来说明：假设两个跨域节点分别为 node1 和 node2，node1 在 domainA 下，node2"
" 在 domainB 下，且 node1 确实有 domainB 下所能连得通的 IP，node2 也是拥有 domainA 下所能连得通的 "
"IP："
msgstr ""

#: ../../source/Cross 2ae1b1c625db41f68f526fee0da96b5d Manual.rst:85 User
#: domain network
msgid "**场景一：** node1 的网络域地址列表配置了 domainB 下的 IP，node2 的网络域地址列表没有配置 domainA 下的 IP。"
msgstr ""

#: ../../source/Cross 5db5f1b6b0d54d25a55c900ad7e37118 Manual.rst:87 User
#: domain network
msgid ""
"如果此时 node1 主动连接 node2，这种情况下只要拨号地址的物理网络本身是可到达的，则可以成功建立连接，并且 node2 "
"的网络域地址列表会自动回写 domainA 。"
msgstr ""

#: ../../source/Cross Manual.rst:89 User a4a37d53d782471ea647a5129ec5b313
#: domain network
msgid ""
"如果此时 node2 主动连接 node1，这种情况下只要拨号地址的物理网络本身是可到达的，则可以成功建立连接，但是 node2 "
"日志会定时打印找不到 domainA 下的 IP 的警告提示，这条警告信息并不会影响节点的正常运行，若要消除警告日志，需要运维人员手动使用 "
"node2 的 IPC 命令线上增加 domainA 网络域以消除警告日志。"
msgstr ""

#: ../../source/Cross Manual.rst:91 User domain
#: f42c34e621d945f6979cdd519cb1ed9e network
msgid "**场景二：** node1 的网络域地址列表没有配置 domainB 下的 IP，node2 的网络域地址列表配置了 domainA 下的 IP。"
msgstr ""

#: ../../source/Cross Manual.rst:93 User bd4414953942440aa8d55d733666588e
#: domain network
msgid "情况和上述一样，node1 会发生和上述描述的 node2 发生的情况。"
msgstr ""

#: ../../source/Cross Manual.rst:95 User domain
#: fcbedd270792486994e36badbf9f6d5d network
msgid "**场景三：** 双方的网络域地址列表都没有配置对方域下的 IP。"
msgstr ""

#: ../../source/Cross 2d009d93156f4b03b57ad099610a0631 Manual.rst:97 User
#: domain network
msgid ""
"如果此时 node1 主动连接 node2 ，这种情况下只要拨号地址的物理网络本身是可到达的，则可以成功建立连接，并且 node2 "
"的网络域地址列表会自动回写 domainA，node1 日志会出现找不到 domainB 下的 IP 提示，这时候需要运维人员手动使用 node1"
" 的 IPC 命令线上增加 domainB 网络域以消除警告日志。"
msgstr ""

#: ../../source/Cross 769be78ba4d84759bc1effe0b4e9a0be Manual.rst:99 User
#: domain network
msgid ""
"反过来，如果此时 node2 主动连接 node1，这种情况下只要拨号地址的物理网络本身是可到达的，则可以成功建立连接，并且 node1 "
"的网络域地址列表会自动回写 domainB，node2 日志会出现找不到 domainA 下的 IP 提示，这时候需要运维人员手动使用 node2"
" 的 IPC 命令线上增加 domainA 网络域以消除警告日志。"
msgstr ""

#: ../../source/Cross 6fbbf269a7ec4ccdbc3b6f83bd08958a Manual.rst:101 User
#: domain network
msgid ""
"综上所述，总结一下，不同局域网内的节点肯定处在不同的网络域，同时，通过网络域地址列表，可以让处在同一个局域网内的节点处于不同的网络域，这些 "
"**网络域** 都是 **人为划分** 的逻辑上的网络域，由区块链系统部署人员或者运维人员来定义区块链集群的网络域。而一个节点是否为 "
"**跨域节点** ，同样也是 **人为指定** ，由部署人员或运维人员来指定并且设置节点网络域地址列表，网络域地址列表有两个及以上不同 "
"`domain` 下的 `IP` 的节点即为跨域节点。部署人员或运维人员也可以通过IPC命令 **线上增加或修改网络域及其地址** 。"
msgstr ""

#: ../../source/Cross 6d7af4b5251241b2878114264c109780 Manual.rst:103 User
#: domain network
msgid "一般来说，一个内网定义为一个网络域，不同内网的节点想要进行通信，则称之为跨域通信。实际生产环境中的网络比前文举的例子要复杂很多，本文第三章将对不同部署场景下的跨域配置进行举例。"
msgstr ""

#: ../../source/Cross Manual.rst:106 User c6f0e155eb2a430c93cd46b2c3723403
#: domain network
msgid "2.2 节点发现"
msgstr ""

#: ../../source/Cross 9d196a586eb94047b5c06a80faf831fe Manual.rst:108 User
#: domain network
msgid ""
"在 **hyperchain v2.0.8** "
"以及之后的版本，系统集成了节点发现功能，默认开启。节点发现使得节点想要与区块链系统的其他节点组网，其启动前的网络地址配置得到极大简化，并且对于仅仅开放了单向网络通道的两个节点，不管该单向网络通道是"
" 新节点-> 老节点 还是 新节点 <- 老节点，都只需要做好新节点网络地址的配置就行，而不需要对老节点的网络配置进行人工修改。"
msgstr ""

#: ../../source/Cross 99165da7a1f24df0b3b8de936ea0d65d Manual.rst:110 User
#: domain network
msgid "2.2.2节 和 2.2.3节 分别就不同场景对网络地址配置进行说明。"
msgstr ""

#: ../../source/Cross 6e5d9f55b6a94b148b465d2fb5e0b8bc Manual.rst:113 User
#: domain network
msgid "2.2.1 相关配置"
msgstr ""

#: ../../source/Cross Manual.rst:115 User domain
#: fdd5bb11133749e5b074d75e92b8e682 network
msgid "节点发现是系统自带功能，与其相关的配置有："
msgstr ""

#: ../../source/Cross Manual.rst:117 User da3e2984d79443938dad70f3b4574339
#: domain network
msgid "`ns_static.toml` 文件::"
msgstr ""

#: ../../source/Cross Manual.rst:131 User d870bf9c1f564571b6219aeb3132dff8
#: domain network
msgid "2.2.2 新节点加入-双向打通"
msgstr ""

#: ../../source/Cross Manual.rst:133 User d611a3f7575347d391e64b185fa08451
#: domain network
msgid "假设现在有一个新节点要加入分区网络，并且这个新节点与对端节点的网络通道已经双向打通，新节点网络地址如何配置呢？"
msgstr ""

#: ../../source/Cross 095788ac769741a3841b7b63d7b0e306 Manual.rst:135
#: Manual.rst:160 User d05798a2e966467eb26e6b9727a6bbfe domain network
msgid "**推荐方法一：**"
msgstr ""

#: ../../source/Cross 5c38e0db6bc64d2eb965382c2777c978
#: 84064857275b471081f5f817c5f7b2b9 Manual.rst:137 Manual.rst:151 User domain
#: network
msgid ""
"`dynamic.toml` 里的 `[p2p.ip.self.addrs]` 配全当前区块链系统里的 **所有网络域及对应的地址** "
"，对应的地址指的是该域下面的节点要向本地节点发起连接时应该使用的 IP 和 Port；"
msgstr ""

#: ../../source/Cross Manual.rst:139 User bcfd42223d914a0ca1c59c58dae0988d
#: domain network
msgid ""
"`ns_dynamic.toml` 里的 `[p2p.ip.remote.hosts]` 配全了本地节点所有要连接的 **所有对端节点及其地址**"
" ，地址指的是本地节点向对端节点发起连接时应该使用的 IP 和 Port；"
msgstr ""

#: ../../source/Cross 2340e2fecdfd41da809586103230b63e
#: 6a0e488467604158994304eb466bfa70 Manual.rst:141 Manual.rst:166 User domain
#: network
msgid "**推荐方法二（简化）：**"
msgstr ""

#: ../../source/Cross Manual.rst:143 User d3f90d04991342c9903b24028f83f58f
#: domain network
msgid ""
"`dynamic.toml` 里的 `[p2p.ip.self.addrs]` "
"只配置了新域及对应的地址，对应的地址指的是该域下面的节点要向本地节点发起连接时应该使用的 IP 和 Port；"
msgstr ""

#: ../../source/Cross Manual.rst:145 User aa2917ff34db4af3a06606d50181a391
#: domain network
msgid "`ns_dynamic.toml` 里的 `[p2p.ip.remote.hosts]` 配全当前区块链系统里所有对端节点及其地址。"
msgstr ""

#: ../../source/Cross 6ac64a9e1c794fadac7a38da535e166e Manual.rst:147 User
#: domain network
msgid ""
"新节点与其他对端节点网络连接建立完成后：1. 由于新节点 `ns_dynamic.toml` `[p2p.ip.remote.hosts]` "
"配全了所有对端节点及其地址，因此，其他对端节点 `dynamic.toml` 里的 `[p2p.ip.self.addrs]` "
"将自动动态回写新节点携带过来的新域及对应地址（如果新节点处在一个新域名下的话） 。2. 由于新节点 `dynamic.toml`  "
"`[p2p.ip.self.addrs]` 只配置了新域及对应的地址， "
"因此，新节点日志文件里将打印缺少其他domain信息的警告，这个提示不会影响节点的正常运行，可以参考IPC使用手册，在新节点上执行新增域信息的命令，来消除这个警告日志。"
msgstr ""

#: ../../source/Cross 69855278946a43659d95a29fbbbd0851 Manual.rst:149 User
#: domain network
msgid "**推荐方法三（简化）：**"
msgstr ""

#: ../../source/Cross Manual.rst:153 User d9cf582f206b4562aa69e589ed6b8162
#: domain network
msgid ""
"`ns_dynamic.toml` 里的 `[p2p.ip.remote.hosts]` 至少配了一个对端节点及其地址。如果 hosts "
"里指定的对端节点与区块链系统里的其他对端节点所构成的网络连接拓扑是一个连通图，则通过节点发现，本地节点将与其他所有对端节点自动建立起网络连接。"
msgstr ""

#: ../../source/Cross 8bbeb2717d49497082bed768ae0237ac Manual.rst:156 User
#: domain network
msgid "2.2.3 新节点加入-单向打通"
msgstr ""

#: ../../source/Cross Manual.rst:158 User dd5fcfeb672148a6970680f3f0778bfc
#: domain network
msgid "假设现在有一个新节点要加入分区网络，并且这个新节点打通了到对端节点的单向网络通道（后文简称“正向通道”），而对端节点到新节点的网络通道未打通（后文简称“反向通道”），新节点网络地址如何配置呢？"
msgstr ""

#: ../../source/Cross 1c7306bea0f346fbb18687730cd6193a Manual.rst:162 User
#: domain network
msgid "`dynamic.toml` 里的 `[p2p.ip.self.addrs]` 配置只打通了反向通道和打通了正向通道与反向通道的域的地址信息；"
msgstr ""

#: ../../source/Cross Manual.rst:164 User domain
#: eb079d22527940bea62cadffb6a3b4be network
msgid ""
"`ns_dynamic.toml` 里的 `[p2p.ip.remote.hosts]` "
"配置只打通了正向通道但是未打通反向通道的节点地址信息和打通了正向通道与反向通道的节点地址信息，至少配一个对端节点及其地址。"
msgstr ""

#: ../../source/Cross 060e88c5b3b74c6fbc3d296b0f24bde5 Manual.rst:168 User
#: domain network
msgid "`dynamic.toml` 里的 `[p2p.ip.self.addrs]` 只配置打通了反向通道的域的地址信息；"
msgstr ""

#: ../../source/Cross 228d80f809194dbd8c725bf2e2d84ae0 Manual.rst:170 User
#: domain network
msgid ""
"`ns_dynamic.toml` 里的 `[p2p.ip.remote.hosts]`  **必须** "
"配置只打通正向通道但是未打通反向通道的节点地址信息，至少配一个对端节点及其地址。"
msgstr ""

#: ../../source/Cross Manual.rst:173 User bc0b723d84fb4c098ddc5823f818b4ec
#: domain network
msgid "3. 配置举例"
msgstr ""

#: ../../source/Cross 79a0cd381a4e401e8c6a028742e7deb5 Manual.rst:175 User
#: domain network
msgid "本节根据不同部署场景提供具体配置示例供部署人员参考，部署场景包括："
msgstr ""

#: ../../source/Cross Manual.rst:177 User a6e0a4dcd15c4c9288af7f9497d664ed
#: domain network
msgid "**内外网** ：无Nginx、无代理设备，同一个内网里的节点通过内网 IP 地址通信，与外网的节点通过公网 IP 地址通信。"
msgstr ""

#: ../../source/Cross 6bf320d7adb54633a2c43910d2317838 Manual.rst:179 User
#: domain network
msgid ""
"**全Nginx代理** ：同一个内网里的节点通过内网 IP 地址通信（或 nginx 代理内网 IP 通信）；与外网的节点通过 nginx "
"代理公网 IP 通信，即节点不管是访问外网的节点还是被外网节点访问，都需要通过 nginx 进行代理。"
msgstr ""

#: ../../source/Cross 8ca06b352cb7450e8f6777ff1937dc5f Manual.rst:181 User
#: domain network
msgid ""
"**全Nginx反向代理** ：同一个内网里的节点通过内网 IP 地址通信；通过公网 IP 地址访问外网的节点，外网的节点通过 nginx "
"代理访问本地节点，即节点通过公网 IP 地址访问外网的节点，但是被外网节点访问，则需要通过 nginx 进行代理；"
msgstr ""

#: ../../source/Cross Manual.rst:183 User a78c5fe56981460d85f9d2f11d87db36
#: domain network
msgid "**混合型代理** ：前面三种的混合存在。"
msgstr ""

#: ../../source/Cross Manual.rst:185 User domain
#: e4da3b1d79f2402a9924bce23ef4f31b network
msgid "同时，本节将对上述任一部署场景下的全量配置和简化配置都进行配置说明。"
msgstr ""

#: ../../source/Cross 2e0e447950f84e56be0f75547b7db77f Manual.rst:187 User
#: domain network
msgid "全量配置：指的是节点的 `[p2p.ip.remote.hosts]` 配置里配了所有直连节点的网络地址。"
msgstr ""

#: ../../source/Cross 0e967b4e14a54b5f8210fe6fc31c9d42 Manual.rst:189 User
#: domain network
msgid ""
"简化配置：指的是节点的 `[p2p.ip.remote.hosts]` "
"配置里只配了部分直连节点的网络地址，通过节点发现来与其他直连节点建立起网络连接。"
msgstr ""

#: ../../source/Cross 537a17b95e744d71875228cb87715350 Manual.rst:192 User
#: domain network
msgid "3.1 内外网"
msgstr ""

#: ../../source/Cross Manual.rst:194 User domain
#: ed09712d08a04f2f8e012619b5610f86 network
msgid "无Nginx、无代理设备，同一个内网里的节点通过内网 IP 地址通信，与外网的节点通过公网 IP 地址通信。"
msgstr ""

#: ../../source/Cross 6f6cd7cf7d104f209e79343653027971 Manual.rst:197 User
#: domain network
msgid "3.1.1 全量配置"
msgstr ""

#: ../../source/Cross 813e62ae2d0f4370840828595912bccd Manual.rst:199 User
#: domain network
msgid "|image2|"
msgstr ""

#: ../../source/Cross Manual.rst:1358 User bb7419763f9e4a75a8bbaea61c4f13ba
#: domain network
msgid "image2"
msgstr ""

#: ../../source/Cross 03bf4492eaae4ed0b4870c0830fcd33e Manual.rst:201 User
#: domain network
msgid ""
"domain1 是 机构A 所在的网络域，domain2 是 机构B 所在的网络域，domain3 是 机构C "
"所在的网络域。每个节点都拥有一个内网地址和一个外网地址，中间没有架设任何的代理服务器。因此，内网节点可以使用内网 IP 访问内网里的节点，使用公网"
" IP 访问外网节点。"
msgstr ""

#: ../../source/Cross Manual.rst:203 User domain
#: ee93d783dc4f47b9a9c8effcf8442c3c network
msgid "在上面的例子中，各个节点的网络配置理应如下："
msgstr ""

#: ../../source/Cross 0dea80ab4d7f4c699763772ad49acd27
#: 110a6a79c3594c73a51b61d686bffb98 16185f1023c44fd49d74268586d023b8
#: 21f057b1c8a44185a2fe84dd656357a7 58bee186287d4863b7aebd0d77ef1881
#: 6f2ad663730e49948b5a6174b537feb9 722e92e90f754e49b0b8d058cff86b7c
#: Manual.rst:205 Manual.rst:344 Manual.rst:519 Manual.rst:656 Manual.rst:803
#: Manual.rst:940 Manual.rst:1098 Manual.rst:1233 User
#: b6173239017a4ebbb2d4859087445927 domain network
msgid "node1::"
msgstr ""

#: ../../source/Cross 00d2b46d44e44bfb81b1d32a85b3016b
#: 1cac4978baa548dc8758a434d3e77f62 67c5e9f58097491282bc95c44afc8ea1
#: Manual.rst:247 Manual.rst:383 Manual.rst:561 Manual.rst:694 Manual.rst:845
#: Manual.rst:981 Manual.rst:1140 Manual.rst:1272 User
#: b29436ff5b084c1782e6eb1372927ebc dcb4b724df884b86aadb580975dc2a43
#: dd24083426ee467da208bcd504cdcefa domain e6dc9d5bced347589f261f516b639f09
#: ef4e43e7bb5d4390962455d8bc68f589 network
msgid "node3::"
msgstr ""

#: ../../source/Cross 0ff0e394aa124028a5015135dc65e430
#: 10c92b65284947cfb3309b44695e5818 1d6ed591b892416181c361b59487228d
#: 274a1d50c78b452fa2ac30554a912dcf 404982d9e9ba4b638f5952b3130dda5d
#: 980efacea2d04e349e50989308376fbd Manual.rst:268 Manual.rst:403
#: Manual.rst:582 Manual.rst:714 Manual.rst:866 Manual.rst:1001 Manual.rst:1161
#: Manual.rst:1292 User b8f90c31d2074f82a360aece81e659c8
#: dc2bf7c1b6904c4c83cff2022904118c domain network
msgid "node4::"
msgstr ""

#: ../../source/Cross 031851c6320c4d54966468de8b4a769c
#: 2c31d9022b03484b874b6533d514b4e1 4b0abd90654a4a81856056c59b9a34f9
#: 7b5342eceaa44dc195432539c62ff600 9ef946b72f0b48e6acb546a7ecfc12c0
#: Manual.rst:291 Manual.rst:423 Manual.rst:603 Manual.rst:733 Manual.rst:887
#: Manual.rst:1022 Manual.rst:1182 Manual.rst:1312 User
#: dcb64a0b12024ba38e7dc78f862c711d dd5e16a86ba84b2380f3d24f5f7ff2e4 domain
#: ea7ccf65977147b1b638b7aa55c5bae5 network
msgid "node5::"
msgstr ""

#: ../../source/Cross 1adab0f1835e48a681eec9bf11b8da35 Manual.rst:334 User
#: domain network
msgid "3.1.2 简化配置"
msgstr ""

#: ../../source/Cross 5f0b59f2825941e5ac6608934220a47a Manual.rst:336 User
#: domain network
msgid "（ **注：虽不用配置全部hosts，但配置也需保证整个网络拓扑图为连通图，即不存在网络分区的现象** ）。"
msgstr ""

#: ../../source/Cross Manual.rst:338 User b99a84d816354cb3a884ba2cba7419e5
#: domain network
msgid "|image3|"
msgstr ""

#: ../../source/Cross Manual.rst:1359 User dd123cc5d6e94fa0a966dab83a1dd209
#: domain network
msgid "image3"
msgstr ""

#: ../../source/Cross 86b5ba340def4347be2e63f337d95282 Manual.rst:340 User
#: domain network
msgid ""
"使用与 **3.1.1 全量配置** 一样的例子，网络配置不需要配全量直连节点的地址，即 node1 和 node3 "
"虽然都没有配置彼此的IP，但他们最终可以通过其他节点互相发现对方。各个节点的网络配置详见下文。"
msgstr ""

#: ../../source/Cross 6b302c64a3e142349c2ed8c492c801df Manual.rst:342 User
#: domain network
msgid ""
"当然，网络配置也可以更加简化，只要保证两个节点之间有共同连接的节点，那么他们就不用配彼此的IP，可以通过这个共同节点发现对方，这样便可以简化对于 "
"`hosts` 的配置。"
msgstr ""

#: ../../source/Cross 23378554fde449ddabea17047f171fba
#: 28669a539ddd4252b2d1055f942dd4f8 3292b0a6e49b4fb685347e8a6e753fbf
#: 418de1d21cfc407880129cd7b3975f45 Manual.rst:363 Manual.rst:540
#: Manual.rst:675 Manual.rst:824 Manual.rst:960 Manual.rst:1119 Manual.rst:1252
#: User cda1f72232f4409d809895b489f0e053 dbcab232bb284f1b8fe8be0daf82cd03
#: domain e489fe114d4543168ae7d0cba6277d97 network
msgid "node2::"
msgstr ""

#: ../../source/Cross 001b27695e514b80b4e3ff3b1159fd79
#: 0602b5b48c294f00ba1b1f568c8367fb 43dae35716d3433e90038e39154b95f4
#: 50b7008865394350ba518dd29a57fa48 5a428959f2ba4b31aaf72d49b60f61c4
#: 76d0bfb5a2bd4f31bd511405a35f1642 Manual.rst:443 Manual.rst:624
#: Manual.rst:754 Manual.rst:908 Manual.rst:1043 Manual.rst:1203
#: Manual.rst:1333 User be9fdf2bdd29484186cc01073fd41561 domain network
msgid "node6::"
msgstr ""

#: ../../source/Cross Manual.rst:465 User a2fa1aa213994252820e6e64cc696850
#: domain network
msgid "3.2 全Nginx代理"
msgstr ""

#: ../../source/Cross 771b63425ce04d1c90c663867edce58f Manual.rst:467 User
#: domain network
msgid ""
"同一个内网里的节点通过内网 IP 地址通信（或 nginx 代理内网 IP 通信）；与外网的节点通过 nginx 代理公网 IP "
"通信，即节点不管是访问外网的节点还是被外网节点访问，都需要通过 nginx 进行代理。"
msgstr ""

#: ../../source/Cross Manual.rst:470 User bc8c7b647f9b43a689508bcf9d3f7ebc
#: domain network
msgid "3.2.1 全量配置"
msgstr ""

#: ../../source/Cross 1ea3035d9b90443580fc79ea49440014 Manual.rst:472
#: Manual.rst:650 User c8a28aed67894d95acf31b157531fac0 domain network
msgid "|image4|"
msgstr ""

#: ../../source/Cross 1a7ed802d4384c3089311d263334de94 Manual.rst:1360 User
#: b49b24c9ef284b739302cf7f5ff88d83 domain network
msgid "image4"
msgstr ""

#: ../../source/Cross 185d6618476f4588a7a12745e26f6b25 Manual.rst:474 User
#: domain network
msgid ""
"如上图所示，domain1 是 机构A 所在的网络域，domain2 是 机构B 所在的网络域，domain3 是 机构C "
"所在的网络域，并且它们都各自架设了一台 nginx 做转发，这样的好处是节点不需要连接外网也可相互通信，机构内的节点都只需根据内网 IP "
"进行连接即可。说明一下图中 nginx 的映射规则："
msgstr ""

#: ../../source/Cross Manual.rst:492 User b19bf2ac8efb47ed98e582444578552e
#: domain network
msgid "机构B：nginxB: 117.17.0.1 (外) --> 10.30.0.1 (内)"
msgstr ""

#: ../../source/Cross 903b5083529e4df6b34576f06d8531d6 Manual.rst:493 User
#: domain network
msgid "node2 和 node5 在 nginxB 的映射分别为："
msgstr ""

#: ../../source/Cross Manual.rst:494 User domain
#: e0a0208e3f1d40ea811a6cd2166803e1 network
msgid ""
"nginxB-->node1: 117.17.0.1:50011 (nginxB外) --> 10.30.0.1:50011 (nginxB内) "
"--> 172.16.0.1:50011 (内)"
msgstr ""

#: ../../source/Cross 117a7472d53b401385efa74bfa35f4af Manual.rst:495 User
#: domain network
msgid ""
"nginxB-->node4: 117.17.0.1:50012 (nginxB外) --> 10.30.0.1:50012 (nginxB内) "
"--> 172.16.0.2:50011 (内)"
msgstr ""

#: ../../source/Cross Manual.rst:496 User bba20e721bd8495f8e124ead03858a8a
#: domain network
msgid "而机构B内的节点想要访问机构A中的节点 node1 和 node4，则在机构B中的 nginxB 上对 node1 和 node4 做映射，"
msgstr ""

#: ../../source/Cross 9df6a2243aca40629a0ec8ce20397365 Manual.rst:497 User
#: domain network
msgid ""
"即使用 niginxB 映射到 node1 和 node4 所在机构A的 nginxA "
"的公网IP，使得机构B通过访问nginxB的内网就可以将流量转发到机构A中的节点"
msgstr ""

#: ../../source/Cross Manual.rst:498 User domain
#: edb5bc6dfa7b414b9279eab06dc6cbee network
msgid "node1 和 node4 在机构B中架设的 nginxB 上的映射为："
msgstr ""

#: ../../source/Cross 66a6c1890b6a4f0781a535baad5e85e7 Manual.rst:499 User
#: domain network
msgid "nginxB-->node1: 10.30.0.1:50013 (nginxB内) --> 62.219.0.1:50011 (nginxA外)"
msgstr ""

#: ../../source/Cross Manual.rst:500 User b76d56afd61d4cdd9654ae37c74682a0
#: domain network
msgid "nginxB-->node4: 10.30.0.1:50014 (nginxB内) --> 62.219.0.1:50012 (nginxA外)"
msgstr ""

#: ../../source/Cross 69873ea1b8ff4c899b1ce5757546ab55 Manual.rst:501 User
#: domain network
msgid "同理，node3 和 node6 在机构B中架设的 nginxB 上的映射为："
msgstr ""

#: ../../source/Cross Manual.rst:502 User b3ef7ad42f5b45599cacb91e6d98e42c
#: domain network
msgid "nginxB-->node3: 10.30.0.1:50015 (nginxA内) --> 118.19.0.1:50011 (nginxC外)"
msgstr ""

#: ../../source/Cross 891b6c92846b4e6fb9e64c3f1be62f8b Manual.rst:503 User
#: domain network
msgid "nginxB-->node6: 10.30.0.1:50016 (nginxA内) --> 118.19.0.1:50012 (nginxC外)"
msgstr ""

#: ../../source/Cross 6db9d21297434162b8f54c42a6aa79eb Manual.rst:506 User
#: domain network
msgid "机构C：nginxC: 118.19.0.1 (外) --> 10.40.0.1 (内)"
msgstr ""

#: ../../source/Cross 80d5581ec4af40afb9fa081ff75277ae Manual.rst:507 User
#: domain network
msgid "node3 和 node6 在 nginxC 的映射分别为："
msgstr ""

#: ../../source/Cross Manual.rst:508 User domain
#: f7c363f0d09a458084c3812c6ecab57a network
msgid ""
"nginxC-->node3: 118.19.0.1:50011 (nginxC外) --> 10.40.0.1:50011 (nginxC内) "
"--> 192.168.0.1:50011 (内)"
msgstr ""

#: ../../source/Cross Manual.rst:509 User df753a1bc4df42e483a0ad74fb79c2eb
#: domain network
msgid ""
"nginxC-->node6: 118.19.0.1:50012 (nginxC外) --> 10.40.0.1:50012 (nginxC内) "
"--> 192.168.0.2:50011 (内)"
msgstr ""

#: ../../source/Cross Manual.rst:510 User domain
#: e069dd5a6cf248a0b980ae3de2565a12 network
msgid "node1 和 node4 在 nginxC 上的映射分别为："
msgstr ""

#: ../../source/Cross 6df7a75a6b8d430994a28e45a621d8b8 Manual.rst:511 User
#: domain network
msgid "nginxC-->node1: 10.40.0.1:50013 (nginxC内) --> 62.219.0.1:50011 (nginxA外)"
msgstr ""

#: ../../source/Cross Manual.rst:512 User bb8ad5244a5e41e486c90e876f505cf4
#: domain network
msgid "nginxC-->node4: 10.40.0.1:50014 (nginxC内) --> 62.219.0.1:50012 (nginxA外)"
msgstr ""

#: ../../source/Cross 8f5ae36a33b748f6b906cf7e3a19b4fd Manual.rst:513 User
#: domain network
msgid "node2 和 node5 在 nginxC 上的映射分别为："
msgstr ""

#: ../../source/Cross 6b0ac975a71b4f72b8d6522457beeb16 Manual.rst:514 User
#: domain network
msgid "nginxC-->node2: 10.40.0.1:50015 (nginxA内) --> 117.17.0.1:50011 (nginxB外)"
msgstr ""

#: ../../source/Cross Manual.rst:515 User domain
#: fab5a7a6d1294c25a0fcc0d1744fc54e network
msgid "nginxC-->node5: 10.40.0.1:50016 (nginxA内) --> 117.17.0.1:50012 (nginxB外)"
msgstr ""

#: ../../source/Cross 1b6b9e5cb49f48f9a3b61f9dbdf9dd55 Manual.rst:517 User
#: domain network
msgid "在上面的例子中，各个节点的网络配置理应如下:"
msgstr ""

#: ../../source/Cross 8dc88e5d776042af80226efeb30ee50d Manual.rst:646 User
#: domain network
msgid "3.2.2 简化配置"
msgstr ""

#: ../../source/Cross 1f76ef25c4de4eb3a45ce1d2e5d5dac1
#: 64c5567634824de59363caa6d2d7b5da Manual.rst:648 Manual.rst:932
#: Manual.rst:1227 User b9bd7129b9ef4e029ba528addebd45e0 domain network
msgid "（ **注：虽不用配置全部hosts，但配置也需保证整个网络topo图为连通图，即不存在网络分区的现象** ）。"
msgstr ""

#: ../../source/Cross 966197e01b094df9a8df44773617e672 Manual.rst:652 User
#: domain network
msgid ""
"使用与 **3.2.1 全量配置**  一样的例子，网络配置不需要配全量直连节点的地址，即 node1 和 node3 "
"虽然都没有配置彼此的IP，但他们最终可以通过其他节点互相发现对方，各个节点的网络配置详见下文。"
msgstr ""

#: ../../source/Cross 1d33d0648fc04f3e958f21b287d2beec
#: 95fc74dc7dd443c3a021254758fdde9f Manual.rst:654 Manual.rst:938 User domain
#: network
msgid ""
"当然， 网络配置也可以更加简化，只要保证两个节点之间有共同连接的节点，那么他们就不用配彼此的IP，可以通过这个共同节点发现对方，这样便可以简化对于"
" `hosts` 的配置。"
msgstr ""

#: ../../source/Cross 2c54d69e7d224e6ca6e275336dfd07ce Manual.rst:777 User
#: domain network
msgid "3.3 全Nginx反向代理"
msgstr ""

#: ../../source/Cross 49565c4445e247949703ff31674c33f1 Manual.rst:779 User
#: domain network
msgid ""
"nginx 反向代理指的是外域节点访问本域节点需要通过本域下的 nginx "
"做转发，而本域节点想要访问外域节点，可以直接访问外网地址，不需要通过自己域下的 nginx 做转发。这种网络情况比全 nginx 代理要简单的多。"
msgstr ""

#: ../../source/Cross 38240add8f38425a8eb986999e592b78 Manual.rst:782 User
#: domain network
msgid "3.3.1 全量配置"
msgstr ""

#: ../../source/Cross 608cc651f8f946009dfb9ae57e1462fc Manual.rst:784 User
#: domain network
msgid "|image5|"
msgstr ""

#: ../../source/Cross 00da02c7050c44dd8b1209ce9581d0c8 Manual.rst:1361 User
#: domain network
msgid "image5"
msgstr ""

#: ../../source/Cross Manual.rst:786 User domain
#: eb34571c813e476382b2a41ad1a8eb91 network
msgid ""
"如上图所示，domain1 是 机构A 所在的网络域，domain2 是 机构B 所在的网络域，domain3 是 机构C "
"所在的网络域，并且它们都各自架设了一台 nginx 做转发"
msgstr ""

#: ../../source/Cross Manual.rst:788 User domain
#: eed02932b0ab4f9f80f5036f88b899ef network
msgid "说明一下图中 nginx 的映射规则::"
msgstr ""

#: ../../source/Cross 28c24f410d154a37991e2e83915bc136 Manual.rst:930 User
#: domain network
msgid "3.3.2 简化配置"
msgstr ""

#: ../../source/Cross 111fdac18fbb4b8d8aada553a3a09f12 Manual.rst:934 User
#: domain network
msgid "|image6|"
msgstr ""

#: ../../source/Cross 72e812d989bd462c9fe4fda6e95bb2f9 Manual.rst:1362 User
#: domain network
msgid "image6"
msgstr ""

#: ../../source/Cross Manual.rst:936 User d4a12c8146324595aea8308a68099e0d
#: domain network
msgid ""
"使用与 **3.3.1 全量配置** 一样的例子，网络配置不需要配全量直连节点的地址，即 node1 和 node3 "
"虽然都没有配置彼此的IP，但他们最终可以通过其他节点互相发现对方，各个节点的网络配置详见下文。"
msgstr ""

#: ../../source/Cross 8c386483f4f748f28a24539fafa29f73 Manual.rst:1066 User
#: domain network
msgid "3.4 混合型网络"
msgstr ""

#: ../../source/Cross Manual.rst:1069 User domain
#: e9809d7ff7af488e9b424352070f1bef network
msgid "3.4.1 全量配置"
msgstr ""

#: ../../source/Cross 7e7cf553ddfa4eceabd6460b9a93d713 Manual.rst:1071 User
#: domain network
msgid "|image7|"
msgstr ""

#: ../../source/Cross Manual.rst:1363 User a8c1f9b452a842d6ac7e9e1b76ffca94
#: domain network
msgid "image7"
msgstr ""

#: ../../source/Cross 93593cee9beb42609c4ddf636a3c61cb Manual.rst:1073 User
#: domain network
msgid "domian1为机构A所在的网络域，domain2为机构B所在的网络域，domain3是机构C所在的网络域，机构A要求使用nginx做转发，机构B使用nginx做反向代理，机构C无代理服务器，如上图所示，机构A，B，C都部署了两个节点，并且机构A，B都架设了一台nginx做转发。"
msgstr ""

#: ../../source/Cross 827bd1be8d1b476bb9a560086802e013 Manual.rst:1087 User
#: domain network
msgid "机构B：117.17.0.1 (外)"
msgstr ""

#: ../../source/Cross 6448252dc99f478aaa5bbffe4319576a Manual.rst:1088 User
#: domain network
msgid "nginxB-->node2 117.17.0.1:50011 (外) --> 172.16.0.1:50011 (内)"
msgstr ""

#: ../../source/Cross Manual.rst:1089 User aa039c1e2d3d4982bef4bdf1e9f05185
#: domain network
msgid "nginxB-->node5 117.17.0.1:50012 (外) --> 172.16.0.2:50011 (内)"
msgstr ""

#: ../../source/Cross Manual.rst:1090 User domain
#: e36b02fb60194deaa7d35b7fe4a4df40 network
msgid "而机构B想要访问机构A中的节点node1和node4，直接访问对应的公网IP即可"
msgstr ""

#: ../../source/Cross Manual.rst:1092 User bed311aa3f6341c3bb5a6104c05ef8ee
#: domain network
msgid "机构C：118.19.0.1 (外)"
msgstr ""

#: ../../source/Cross 18f9ad588a824122ad3846ec85f1becb Manual.rst:1093 User
#: domain network
msgid "node3 118.19.0.1:50011 (外) --> 192.168.0.1:50011 (内)"
msgstr ""

#: ../../source/Cross 40b7d814337544a99c4d54f9b50ae921 Manual.rst:1094 User
#: domain network
msgid "node6 118.19.0.1:50012 (外) --> 192.168.0.2:50011 (内)"
msgstr ""

#: ../../source/Cross Manual.rst:1096 User domain
#: f09f8d99735b43b593f99a2abf503a94 network
msgid "在上面的例子中，结合第一章节和第二章节中介绍的映射规则，也即对于domain2中的节点，别的域要想连接domain2中的节点，就必须向它提供自己的外网地址。配置理应如下："
msgstr ""

#: ../../source/Cross 365c847acb6f49edbd34f687d98897bd Manual.rst:1225 User
#: domain network
msgid "3.4.2 简化配置"
msgstr ""

#: ../../source/Cross 411ba6a5b4d34658a5c7580f9226a211 Manual.rst:1229 User
#: domain network
msgid "|image8|"
msgstr ""

#: ../../source/Cross Manual.rst:1364 User domain
#: f7a2846e38fc42f8b34def46031c946d network
msgid "image8"
msgstr ""

#: ../../source/Cross Manual.rst:1231 User b8d9b112a6cc4fddbb4c250a9fa5895b
#: domain network
msgid "同样的例子，即可和上述配置一样，也可如下配置："
msgstr ""

#: ../../source/Cross Manual.rst:1354 User b1d0b4c908da41458834db84367afc65
#: domain network
msgid ""
"node1和node3都没有配置彼此的IP，但他们最终可以通过其他节点互相发现对方。当然也可以更加简化，只要保证两个节点之间有共同连接的节点，那么他们就可以不用配彼此的IP，可以通过这个共同节点发现对方，这样便可以简化对于"
" `p2p.ip.remote.hosts` 的配置。"
msgstr ""

